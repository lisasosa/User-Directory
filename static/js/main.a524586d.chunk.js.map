{"version":3,"sources":["components/People.js","App.js","serviceWorker.js","index.js"],"names":["People","props","className","results","map","item","index","key","src","picture","thumbnail","alt","name","first","last","cell","email","moment","dob","date","format","App","search","e","console","log","target","value","setState","searchValue","state","fetch","then","response","json","data","this","toLowerCase","filter","includes","htmlFor","onKeyUp","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uPA2BiBA,MAtBhB,SAAiBC,GACd,OACI,yBAAKC,UAAU,UACf,+BACA,+BACCD,EAAME,QAAQC,KAAI,SAACC,EAAMC,GACxB,OAAQ,wBAAIC,IAAKD,GACjB,4BAAI,yBAAKE,IAAKH,EAAKI,QAAQC,UAAWC,IAAI,gBAC1C,4BAAKN,EAAKO,KAAKC,MAAf,IAAuBR,EAAKO,KAAKE,MACjC,4BAAKT,EAAKU,MACV,4BAAKV,EAAKW,OACV,4BAAKC,EAAOZ,EAAKa,IAAIC,MAAMC,OAAO,cCmC7BC,G,wDA5CZ,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAiBRqB,OAAU,SAACC,GACTC,QAAQC,IAAIF,EAAEG,OAAOC,OACrB,EAAKC,SAAS,CAACC,YAAaN,EAAEG,OAAOC,SAlBrC,EAAKG,MAAQ,CACXD,YAAa,GACb1B,QAAS,IAJM,E,gEAOC,IAAD,OAElB4B,MAAM,yCAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJX,QAAQC,IAAIU,GACZ,EAAKP,SAAS,CAACzB,QAAQgC,EAAKhC,e,+BAU9B,IAAIA,EAAUiC,KAAKN,MAAM3B,QACrB0B,EAAcO,KAAKN,MAAMD,YAAYQ,cASzC,OARIR,IACF1B,EAAUA,EAAQmC,QAAO,SAACjC,GAGxB,OAFkBA,EAAKO,KAAKC,MAAQ,IAAMR,EAAKO,KAAKE,MAAMuB,cAE1CE,SAASV,OAK3B,yBAAK3B,UAAU,OACf,2BAAOsC,QAAQ,UAAf,mBACA,2BAAOC,QAAWL,KAAKd,SACvB,kBAAC,EAAD,CAAQnB,QAAWA,S,GAvCNuC,IAAMC,YCMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.a524586d.chunk.js","sourcesContent":["import React from 'react';\r\n// import logo from './logo.svg';\r\n\r\nimport * as moment from 'moment'\r\n\r\n function People (props) {\r\n    return (\r\n        <div className=\"People\">\r\n        <table>\r\n        <tbody>\r\n        {props.results.map((item, index) => {\r\n          return (<tr key={index}>\r\n          <td><img src={item.picture.thumbnail} alt=\"person-pic\"/></td>\r\n          <td>{item.name.first} {item.name.last}</td>\r\n          <td>{item.cell}</td>\r\n          <td>{item.email}</td>\r\n          <td>{moment(item.dob.date).format(\"l\")}</td>\r\n          </tr>)\r\n        })}\r\n        </tbody>\r\n        </table>\r\n       \r\n        </div>\r\n      );\r\n    }\r\n  \r\n  \r\n  export default People;\r\n  ","import React from 'react';\nimport People from './components/People'\n// import logo from './logo.svg';\nimport './App.css';\nimport * as moment from 'moment'\n\n class App extends React.Component {\n   constructor(props) {\n     super(props) \n     this.state = {\n       searchValue: \"\",\n       results: []\n     }\n   }\n   componentDidMount(){\n     //life cycle method\n    fetch('https://randomuser.me/api/?results=50')\n    \n    .then(response => response.json())\n    .then(data => {\n      console.log(data)\n      this.setState({results:data.results})\n    })\n\n   }\n   search =  (e) => {\n     console.log(e.target.value)\n     this.setState({searchValue: e.target.value})\n   }\n \n  render(){\n    var results = this.state.results\n    var searchValue = this.state.searchValue.toLowerCase()\n    if (searchValue) {\n      results = results.filter((item) => {\n        const fullName = (item.name.first + \" \" + item.name.last).toLowerCase()\n    \n        return fullName.includes(searchValue)\n        //returns true or false\n      }) \n    }\n    return (\n      <div className=\"App\">\n      <label htmlFor=\"search\">Search by Name:</label>\n      <input onKeyUp = {this.search}/>\n      <People results = {results}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}